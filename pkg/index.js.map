{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["type Enumerate<\n\tN extends number,\n\tAcc extends number[] = [],\n> = Acc[\"length\"] extends N\n\t? Acc[number]\n\t: Enumerate<N, [...Acc, Acc[\"length\"]]>;\n\ntype IntRange<F extends number, T extends number> = Exclude<\n\tEnumerate<T>,\n\tEnumerate<F>\n>;\n\nconst css = `\n  #wrapper {\n    width: 100%;\n    height: 100%;\n    contain: strict;\n    background-color: rgba(255, 255, 255, 0.2);\n    cursor: pointer;\n  }\n\n  #indicator {\n    width: 100%;\n    height: 100%;\n    transform: none;\n    will-change: transform;\n    background-color: currentColor;\n    pointer-events: none;\n  }\n`;\n\nconst ErrorMessages = {\n\tNO_DURATION:\n\t\t\"You need to set duration before you can start/stop the progress bar.\",\n};\n\nexport default class ProgressBar extends HTMLElement {\n\t#wrapper: HTMLDivElement;\n\t#indicator: HTMLDivElement;\n\t#animation: Animation;\n\t#animationDuration: number;\n\n\t/**\n\t * Renders the progress bar to a shadow DOM, caches references to the wrapper\n\t * && indicator elements and adds a click handler to the wrapper element for\n\t * handling the seeking.\n\t */\n\tconnectedCallback(): void {\n\t\tconst sDOM = this.attachShadow({ mode: \"closed\" });\n\n\t\tsDOM.innerHTML = `\n      <style>${css}</style>\n      <div id=\"wrapper\">\n        <div id=\"indicator\"></div>\n      </div>\n    `;\n\n\t\tthis.#wrapper = sDOM.querySelector(\"#wrapper\");\n\t\tthis.#indicator = sDOM.querySelector(\"#indicator\");\n\n\t\tthis.#wrapper.addEventListener(\n\t\t\t\"click\",\n\t\t\t(event) => {\n\t\t\t\tif (event instanceof MouseEvent) {\n\t\t\t\t\tthis.handleClick(event);\n\t\t\t\t}\n\t\t\t},\n\t\t\tfalse,\n\t\t);\n\t}\n\n\t/**\n\t * Handle clicking the progress bar wrapper. Calculate the percentate\n\t * to seek to and emits a progress-bar:seek CustomEvent to be listened\n\t * to outside this component to react to the click.\n\t */\n\thandleClick(event: MouseEvent): void {\n\t\tconst percent = this.getMousePositionAsPercent(event);\n\t\tconst detail = { percent };\n\n\t\tdocument.dispatchEvent(new CustomEvent(\"progress-bar:seek\", { detail }));\n\n\t\tthis.currentTime = this.#animationDuration * percent;\n\t}\n\n\t/**\n   * Calculates where in the progress bar the person clicked\n   * in percent.\n\n   */\n\tgetMousePositionAsPercent(mouse: MouseEvent): number {\n\t\tconst boundRect = this.#wrapper.getBoundingClientRect();\n\t\tconst offset = {\n\t\t\tleft: Math.abs(boundRect.left + window.pageXOffset - mouse.pageX),\n\t\t\twidth: Math.round(boundRect.width),\n\t\t};\n\n\t\treturn offset.left / offset.width;\n\t}\n\n\t/**\n\t * Setting this recrates the animation with the new duraton and pauses the animation.\n\t */\n\tset duration(durationSeconds: number) {\n\t\tthis.#animationDuration = durationSeconds * 1000;\n\n\t\t/** @type {Keyframe[]} */\n\t\tconst keyframes = [\n\t\t\t{\n\t\t\t\ttransform: \"translateX(-100%)\",\n\t\t\t},\n\t\t\t{\n\t\t\t\ttransform: \"translateX(0%)\",\n\t\t\t},\n\t\t];\n\n\t\tthis.#animation = this.#indicator.animate(keyframes, {\n\t\t\tduration: this.#animationDuration,\n\t\t\titerations: 1,\n\t\t});\n\n\t\tthis.#animation.pause();\n\t}\n\n\t/**\n\t * Setting this stops the animations, updates the playback rate and plays it again.\n\t */\n\tset playbackRate(playbackRate: IntRange<0, 1>) {\n\t\tthis.stop();\n\t\tthis.#animation.playbackRate = playbackRate;\n\t\tthis.start();\n\t}\n\n\t/**\n\t * Set current time with miliseconds.\n\t * @memberof ProgressBar\n\t */\n\tset currentTime(currentTime: number) {\n\t\tif (this.#animation) {\n\t\t\tthis.#animation.currentTime = currentTime;\n\t\t}\n\t}\n\n\t/**\n\t * Starts the animation if duration is defined.\n\t *\n\t * @throws Will throw an error if duration is not set.\n\t */\n\tstart(): void {\n\t\tif (!this.#animation) {\n\t\t\tthrow new Error(ErrorMessages.NO_DURATION);\n\t\t}\n\n\t\tthis.#animation.play();\n\t}\n\n\t/**\n\t * Stops the animation if duration is defined.\n\t *\n\t * @throws Will throw an error if duration is not set.\n\t */\n\tstop(): void {\n\t\tif (!this.#animation) {\n\t\t\tthrow new Error(ErrorMessages.NO_DURATION);\n\t\t}\n\n\t\tthis.#animation.pause();\n\t}\n}\n\ncustomElements.define(\"progress-bar\", ProgressBar);\n"],
  "mappings": "2UAYA,IAAMA,EAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBNC,EAAgB,CACrB,YACC,sEACF,EAlCAC,EAAAC,EAAAC,EAAAC,EAoCqBC,EAArB,cAAyC,WAAY,CAArD,kCACCC,EAAA,KAAAL,GACAK,EAAA,KAAAJ,GACAI,EAAA,KAAAH,GACAG,EAAA,KAAAF,GAOA,mBAA0B,CACzB,IAAMG,EAAO,KAAK,aAAa,CAAE,KAAM,QAAS,CAAC,EAEjDA,EAAK,UAAY;AAAA,eACJR,CAAG;AAAA;AAAA;AAAA;AAAA,MAMhBS,EAAA,KAAKP,EAAWM,EAAK,cAAc,UAAU,GAC7CC,EAAA,KAAKN,EAAaK,EAAK,cAAc,YAAY,GAEjDE,EAAA,KAAKR,GAAS,iBACb,QACCS,GAAU,CACNA,aAAiB,YACpB,KAAK,YAAYA,CAAK,CAExB,EACA,EACD,CACD,CAOA,YAAYA,EAAyB,CACpC,IAAMC,EAAU,KAAK,0BAA0BD,CAAK,EAC9CE,EAAS,CAAE,QAAAD,CAAQ,EAEzB,SAAS,cAAc,IAAI,YAAY,oBAAqB,CAAE,OAAAC,CAAO,CAAC,CAAC,EAEvE,KAAK,YAAcH,EAAA,KAAKL,GAAqBO,CAC9C,CAOA,0BAA0BE,EAA2B,CACpD,IAAMC,EAAYL,EAAA,KAAKR,GAAS,sBAAsB,EAChDc,EAAS,CACd,KAAM,KAAK,IAAID,EAAU,KAAO,OAAO,YAAcD,EAAM,KAAK,EAChE,MAAO,KAAK,MAAMC,EAAU,KAAK,CAClC,EAEA,OAAOC,EAAO,KAAOA,EAAO,KAC7B,CAKA,IAAI,SAASC,EAAyB,CACrCR,EAAA,KAAKJ,EAAqBY,EAAkB,KAG5C,IAAMC,EAAY,CACjB,CACC,UAAW,mBACZ,EACA,CACC,UAAW,gBACZ,CACD,EAEAT,EAAA,KAAKL,EAAaM,EAAA,KAAKP,GAAW,QAAQe,EAAW,CACpD,SAAUR,EAAA,KAAKL,GACf,WAAY,CACb,CAAC,GAEDK,EAAA,KAAKN,GAAW,MAAM,CACvB,CAKA,IAAI,aAAae,EAA8B,CAC9C,KAAK,KAAK,EACVT,EAAA,KAAKN,GAAW,aAAee,EAC/B,KAAK,MAAM,CACZ,CAMA,IAAI,YAAYC,EAAqB,CAChCV,EAAA,KAAKN,KACRM,EAAA,KAAKN,GAAW,YAAcgB,EAEhC,CAOA,OAAc,CACb,GAAI,CAACV,EAAA,KAAKN,GACT,MAAM,IAAI,MAAMH,EAAc,WAAW,EAG1CS,EAAA,KAAKN,GAAW,KAAK,CACtB,CAOA,MAAa,CACZ,GAAI,CAACM,EAAA,KAAKN,GACT,MAAM,IAAI,MAAMH,EAAc,WAAW,EAG1CS,EAAA,KAAKN,GAAW,MAAM,CACvB,CACD,EAnICF,EAAA,YACAC,EAAA,YACAC,EAAA,YACAC,EAAA,YAkID,eAAe,OAAO,eAAgBC,CAAW",
  "names": ["css", "ErrorMessages", "_wrapper", "_indicator", "_animation", "_animationDuration", "ProgressBar", "__privateAdd", "sDOM", "__privateSet", "__privateGet", "event", "percent", "detail", "mouse", "boundRect", "offset", "durationSeconds", "keyframes", "playbackRate", "currentTime"]
}
